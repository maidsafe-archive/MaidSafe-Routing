/*  Copyright 2012 MaidSafe.net limited

    This MaidSafe Software is licensed to you under (1) the MaidSafe.net Commercial License,
    version 1.0 or later, or (2) The General Public License (GPL), version 3, depending on which
    licence you accepted on initial access to the Software (the "Licences").

    By contributing code to the MaidSafe Software, or to this project generally, you agree to be
    bound by the terms of the MaidSafe Contributor Agreement, version 1.0, found in the root
    directory of this project at LICENSE, COPYING and CONTRIBUTOR respectively and also
    available at: http://www.maidsafe.net/licenses

    Unless required by applicable law or agreed to in writing, the MaidSafe Software distributed
    under the GPL Licence is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
    OF ANY KIND, either express or implied.

    See the Licences for the specific language governing permissions and limitations relating to
    use of the MaidSafe Software.                                                                 */

option optimize_for = LITE_RUNTIME;

package maidsafe.routing.protobuf;

message Layer {
  required int32 identifier = 1;
  required bytes message = 2;
}

message Endpoint {
  required bytes ip = 1;
  required int32 port = 2;
}

enum NatType {
  kSymmetric = 0;
  kOther = 1;
  kUnknown = 2;
}

message Contact {
  required bytes node_id = 1;
  required bytes connection_id = 2;
  required Endpoint private_endpoint = 3;
  required Endpoint public_endpoint = 4;
  optional NatType nat_type = 5;
  optional bool tcp = 6;
}

message ConfigFile {
  optional bytes node_id = 1;
  optional bytes private_key = 2;
}

// Message wrapper
message Message {
  optional bytes source_id = 1;
  optional bytes destination_id = 2;
  required bool routing_message = 3;
  optional bytes last_id = 4;
  optional bytes relay_id = 5;
  repeated bytes data = 6; // serialised protobuf - possibly encrypted
  optional bytes signature = 7;
  required bool direct = 8;
  optional int32 replication = 9;
  optional sint32 type = 10; // type of data - used in signal to upper layers
//  optional bool cacheable = 11;
  optional int32 cacheable = 11;
  optional int32 id = 12;
  required bool client_node = 13;
  optional bytes relay_connection_id = 14;
  optional bool closest_to_this_node = 15;
  optional bool close_to_this_node = 16;
  repeated bytes route_history = 17;
  required bool request = 18;
  required int32 hops_to_live = 19;
  optional bool visited = 20;
  optional bytes average_distace = 21;
  optional bytes group_source = 22;
  optional bytes group_destination = 23;
  optional bool actual_destination_is_relay_id = 24;  // to support new API's request message to
                                                      // be sent to relaying node and passed on
  optional int32 ack_id = 25;
  repeated bytes ack_node_ids = 26;
}

message SignedMessage {
  required bytes message = 1; // serialised Message
  required bytes signature = 2;
  required bytes id = 3;
}

message ConnectRequest {
  required Contact contact = 1;
  required bytes peer_id = 2;
  optional bool bootstrap = 3;
  optional uint64 timestamp = 4;
}

message ConnectResponse {
  required ConnectResponseType answer = 1;
  optional Contact contact = 2;
  optional bytes connection_id = 3;
  optional Endpoint seen_endpoint = 4;
  optional uint64 timestamp = 5;
  required bytes original_request = 6;
  required bytes original_signature = 7;
}

message ConnectSuccess {
  required bytes node_id = 1;
  required bytes connection_id = 2;
  required bool requestor = 3;
}

message ConnectSuccessAcknowledgement {
  required bytes node_id = 1;
  required bytes connection_id = 2;
  repeated bytes close_ids = 3;
  required bool requestor = 4;
}

message FindNodesRequest {
  required uint32 num_nodes_requested = 1;
  optional uint64 timestamp = 2;
}

message FindNodesResponse {
  repeated bytes nodes = 1;
  optional uint64 timestamp = 2;
  required bytes original_request = 3;
  required bytes original_signature = 4;
}

message PingRequest {
  required bool ping = 1;
  optional uint64 timestamp = 2;
}

message PingResponse {
  required bool pong = 1;
  optional uint64 timestamp = 2;
  required bytes original_request = 3;
  required bytes original_signature = 4;
}

message RemoveRequest {
  required bytes peer_id = 1;
  repeated bytes attempted_nodes = 2;
}

message RemoveResponse {
  required bool success = 1;
  required bytes peer_id = 2;
  required bytes original_request = 3;
}

enum ConnectResponseType {
  kAccepted = 0;
  kRejected = 1;
  kConnectAttemptAlreadyRunning = 2;
}

message NodeIdList {
  message NodeId {
    required bytes node_id = 1;
  }
  repeated NodeId node_id_list = 1;
}

message BasicNodeInfo {
  required bytes node_id = 1;
  required int32 rank = 2;
}

message ClosestNodesUpdate {
  required bytes node = 1;
  repeated BasicNodeInfo nodes_info = 2;
}

message InformClientOfhNewCloseNode {
  required bytes node_id = 1;
}

message GetGroup {
  required bytes node_id = 1;
  repeated bytes group_nodes_id = 2;
}

message NodeInfo {
  required bytes node_id = 1;
  required int32 rank = 2;
  repeated int32 dimension_list = 3;
}
